// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ConnectionRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnectionRequest_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  ConnectionRequest_descriptor_ = file->message_type(0);
  static const int ConnectionRequest_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, protocolversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, speechkitversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, servicename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, uuid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, apikey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, applicationname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, device_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, coords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, lang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, format_),
  };
  ConnectionRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnectionRequest_descriptor_,
      ConnectionRequest::internal_default_instance(),
      ConnectionRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, _has_bits_),
      -1,
      -1,
      sizeof(ConnectionRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnectionRequest, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnectionRequest_descriptor_, ConnectionRequest::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  ConnectionRequest_default_instance_.Shutdown();
  delete ConnectionRequest_reflection_;
}

void protobuf_InitDefaults_message_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ConnectionRequest_default_instance_.DefaultConstruct();
  ConnectionRequest_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_message_2eproto_once_);
void protobuf_InitDefaults_message_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_message_2eproto_once_,
                 &protobuf_InitDefaults_message_2eproto_impl);
}
void protobuf_AddDesc_message_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_message_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\"\342\001\n\021ConnectionRequest\022\032\n"
    "\017protocolVersion\030\001 \001(\005:\0011\022\030\n\020speechkitVe"
    "rsion\030\002 \002(\t\022\023\n\013serviceName\030\003 \002(\t\022\014\n\004uuid"
    "\030\004 \002(\t\022\016\n\006apiKey\030\005 \002(\t\022\027\n\017applicationNam"
    "e\030\006 \002(\t\022\016\n\006device\030\007 \002(\t\022\016\n\006coords\030\010 \002(\t\022"
    "\r\n\005topic\030\t \002(\t\022\014\n\004lang\030\n \002(\t\022\016\n\006format\030\013"
    " \002(\t", 244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_message_2eproto_once_);
void protobuf_AddDesc_message_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_message_2eproto_once_,
                 &protobuf_AddDesc_message_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionRequest::kProtocolVersionFieldNumber;
const int ConnectionRequest::kSpeechkitVersionFieldNumber;
const int ConnectionRequest::kServiceNameFieldNumber;
const int ConnectionRequest::kUuidFieldNumber;
const int ConnectionRequest::kApiKeyFieldNumber;
const int ConnectionRequest::kApplicationNameFieldNumber;
const int ConnectionRequest::kDeviceFieldNumber;
const int ConnectionRequest::kCoordsFieldNumber;
const int ConnectionRequest::kTopicFieldNumber;
const int ConnectionRequest::kLangFieldNumber;
const int ConnectionRequest::kFormatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionRequest::ConnectionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConnectionRequest)
}

void ConnectionRequest::InitAsDefaultInstance() {
}

ConnectionRequest::ConnectionRequest(const ConnectionRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConnectionRequest)
}

void ConnectionRequest::SharedCtor() {
  _cached_size_ = 0;
  speechkitversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servicename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apikey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applicationname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coords_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocolversion_ = 1;
}

ConnectionRequest::~ConnectionRequest() {
  // @@protoc_insertion_point(destructor:ConnectionRequest)
  SharedDtor();
}

void ConnectionRequest::SharedDtor() {
  speechkitversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servicename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  apikey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  applicationname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  coords_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lang_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ConnectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnectionRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnectionRequest_descriptor_;
}

const ConnectionRequest& ConnectionRequest::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ConnectionRequest> ConnectionRequest_default_instance_;

ConnectionRequest* ConnectionRequest::New(::google::protobuf::Arena* arena) const {
  ConnectionRequest* n = new ConnectionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ConnectionRequest)
  if (_has_bits_[0 / 32] & 255u) {
    protocolversion_ = 1;
    if (has_speechkitversion()) {
      speechkitversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_servicename()) {
      servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_uuid()) {
      uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_apikey()) {
      apikey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_applicationname()) {
      applicationname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_device()) {
      device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_coords()) {
      coords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 1792u) {
    if (has_topic()) {
      topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_lang()) {
      lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_format()) {
      format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConnectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConnectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 protocolVersion = 1 [default = 1];
      case 1: {
        if (tag == 8) {
          set_has_protocolversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &protocolversion_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_speechkitVersion;
        break;
      }

      // required string speechkitVersion = 2;
      case 2: {
        if (tag == 18) {
         parse_speechkitVersion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_speechkitversion()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->speechkitversion().data(), this->speechkitversion().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnectionRequest.speechkitVersion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_serviceName;
        break;
      }

      // required string serviceName = 3;
      case 3: {
        if (tag == 26) {
         parse_serviceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_servicename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servicename().data(), this->servicename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnectionRequest.serviceName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_uuid;
        break;
      }

      // required string uuid = 4;
      case 4: {
        if (tag == 34) {
         parse_uuid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_uuid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->uuid().data(), this->uuid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnectionRequest.uuid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_apiKey;
        break;
      }

      // required string apiKey = 5;
      case 5: {
        if (tag == 42) {
         parse_apiKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_apikey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->apikey().data(), this->apikey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnectionRequest.apiKey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_applicationName;
        break;
      }

      // required string applicationName = 6;
      case 6: {
        if (tag == 50) {
         parse_applicationName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_applicationname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->applicationname().data(), this->applicationname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnectionRequest.applicationName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_device;
        break;
      }

      // required string device = 7;
      case 7: {
        if (tag == 58) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device().data(), this->device().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnectionRequest.device");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_coords;
        break;
      }

      // required string coords = 8;
      case 8: {
        if (tag == 66) {
         parse_coords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_coords()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->coords().data(), this->coords().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnectionRequest.coords");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_topic;
        break;
      }

      // required string topic = 9;
      case 9: {
        if (tag == 74) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnectionRequest.topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_lang;
        break;
      }

      // required string lang = 10;
      case 10: {
        if (tag == 82) {
         parse_lang:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lang()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lang().data(), this->lang().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnectionRequest.lang");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_format;
        break;
      }

      // required string format = 11;
      case 11: {
        if (tag == 90) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnectionRequest.format");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConnectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConnectionRequest)
  return false;
#undef DO_
}

void ConnectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConnectionRequest)
  // optional int32 protocolVersion = 1 [default = 1];
  if (has_protocolversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->protocolversion(), output);
  }

  // required string speechkitVersion = 2;
  if (has_speechkitversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->speechkitversion().data(), this->speechkitversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.speechkitVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->speechkitversion(), output);
  }

  // required string serviceName = 3;
  if (has_servicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicename().data(), this->servicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.serviceName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->servicename(), output);
  }

  // required string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.uuid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->uuid(), output);
  }

  // required string apiKey = 5;
  if (has_apikey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apikey().data(), this->apikey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.apiKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->apikey(), output);
  }

  // required string applicationName = 6;
  if (has_applicationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applicationname().data(), this->applicationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.applicationName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->applicationname(), output);
  }

  // required string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.device");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->device(), output);
  }

  // required string coords = 8;
  if (has_coords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coords().data(), this->coords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.coords");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->coords(), output);
  }

  // required string topic = 9;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->topic(), output);
  }

  // required string lang = 10;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.lang");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->lang(), output);
  }

  // required string format = 11;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->format(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConnectionRequest)
}

::google::protobuf::uint8* ConnectionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ConnectionRequest)
  // optional int32 protocolVersion = 1 [default = 1];
  if (has_protocolversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->protocolversion(), target);
  }

  // required string speechkitVersion = 2;
  if (has_speechkitversion()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->speechkitversion().data(), this->speechkitversion().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.speechkitVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->speechkitversion(), target);
  }

  // required string serviceName = 3;
  if (has_servicename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servicename().data(), this->servicename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.serviceName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->servicename(), target);
  }

  // required string uuid = 4;
  if (has_uuid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->uuid().data(), this->uuid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.uuid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->uuid(), target);
  }

  // required string apiKey = 5;
  if (has_apikey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->apikey().data(), this->apikey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.apiKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->apikey(), target);
  }

  // required string applicationName = 6;
  if (has_applicationname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->applicationname().data(), this->applicationname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.applicationName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->applicationname(), target);
  }

  // required string device = 7;
  if (has_device()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device().data(), this->device().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.device");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->device(), target);
  }

  // required string coords = 8;
  if (has_coords()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->coords().data(), this->coords().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.coords");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->coords(), target);
  }

  // required string topic = 9;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->topic(), target);
  }

  // required string lang = 10;
  if (has_lang()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lang().data(), this->lang().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.lang");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->lang(), target);
  }

  // required string format = 11;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnectionRequest.format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->format(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnectionRequest)
  return target;
}

size_t ConnectionRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:ConnectionRequest)
  size_t total_size = 0;

  if (has_speechkitversion()) {
    // required string speechkitVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->speechkitversion());
  }

  if (has_servicename()) {
    // required string serviceName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servicename());
  }

  if (has_uuid()) {
    // required string uuid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());
  }

  if (has_apikey()) {
    // required string apiKey = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->apikey());
  }

  if (has_applicationname()) {
    // required string applicationName = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->applicationname());
  }

  if (has_device()) {
    // required string device = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());
  }

  if (has_coords()) {
    // required string coords = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coords());
  }

  if (has_topic()) {
    // required string topic = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  if (has_lang()) {
    // required string lang = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());
  }

  if (has_format()) {
    // required string format = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());
  }

  return total_size;
}
size_t ConnectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ConnectionRequest)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007fe) ^ 0x000007fe) == 0) {  // All required fields are present.
    // required string speechkitVersion = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->speechkitversion());

    // required string serviceName = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->servicename());

    // required string uuid = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->uuid());

    // required string apiKey = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->apikey());

    // required string applicationName = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->applicationname());

    // required string device = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->device());

    // required string coords = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->coords());

    // required string topic = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());

    // required string lang = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->lang());

    // required string format = 11;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->format());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 protocolVersion = 1 [default = 1];
  if (has_protocolversion()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->protocolversion());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ConnectionRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnectionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnectionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ConnectionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ConnectionRequest)
    UnsafeMergeFrom(*source);
  }
}

void ConnectionRequest::MergeFrom(const ConnectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ConnectionRequest)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ConnectionRequest::UnsafeMergeFrom(const ConnectionRequest& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protocolversion()) {
      set_protocolversion(from.protocolversion());
    }
    if (from.has_speechkitversion()) {
      set_has_speechkitversion();
      speechkitversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.speechkitversion_);
    }
    if (from.has_servicename()) {
      set_has_servicename();
      servicename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.servicename_);
    }
    if (from.has_uuid()) {
      set_has_uuid();
      uuid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.uuid_);
    }
    if (from.has_apikey()) {
      set_has_apikey();
      apikey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.apikey_);
    }
    if (from.has_applicationname()) {
      set_has_applicationname();
      applicationname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.applicationname_);
    }
    if (from.has_device()) {
      set_has_device();
      device_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_);
    }
    if (from.has_coords()) {
      set_has_coords();
      coords_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.coords_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_topic()) {
      set_has_topic();
      topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
    if (from.has_lang()) {
      set_has_lang();
      lang_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lang_);
    }
    if (from.has_format()) {
      set_has_format();
      format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.format_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ConnectionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ConnectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnectionRequest::CopyFrom(const ConnectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ConnectionRequest)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ConnectionRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007fe) != 0x000007fe) return false;

  return true;
}

void ConnectionRequest::Swap(ConnectionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionRequest::InternalSwap(ConnectionRequest* other) {
  std::swap(protocolversion_, other->protocolversion_);
  speechkitversion_.Swap(&other->speechkitversion_);
  servicename_.Swap(&other->servicename_);
  uuid_.Swap(&other->uuid_);
  apikey_.Swap(&other->apikey_);
  applicationname_.Swap(&other->applicationname_);
  device_.Swap(&other->device_);
  coords_.Swap(&other->coords_);
  topic_.Swap(&other->topic_);
  lang_.Swap(&other->lang_);
  format_.Swap(&other->format_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnectionRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnectionRequest_descriptor_;
  metadata.reflection = ConnectionRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectionRequest

// optional int32 protocolVersion = 1 [default = 1];
bool ConnectionRequest::has_protocolversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConnectionRequest::set_has_protocolversion() {
  _has_bits_[0] |= 0x00000001u;
}
void ConnectionRequest::clear_has_protocolversion() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConnectionRequest::clear_protocolversion() {
  protocolversion_ = 1;
  clear_has_protocolversion();
}
::google::protobuf::int32 ConnectionRequest::protocolversion() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.protocolVersion)
  return protocolversion_;
}
void ConnectionRequest::set_protocolversion(::google::protobuf::int32 value) {
  set_has_protocolversion();
  protocolversion_ = value;
  // @@protoc_insertion_point(field_set:ConnectionRequest.protocolVersion)
}

// required string speechkitVersion = 2;
bool ConnectionRequest::has_speechkitversion() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConnectionRequest::set_has_speechkitversion() {
  _has_bits_[0] |= 0x00000002u;
}
void ConnectionRequest::clear_has_speechkitversion() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConnectionRequest::clear_speechkitversion() {
  speechkitversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_speechkitversion();
}
const ::std::string& ConnectionRequest::speechkitversion() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.speechkitVersion)
  return speechkitversion_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_speechkitversion(const ::std::string& value) {
  set_has_speechkitversion();
  speechkitversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectionRequest.speechkitVersion)
}
void ConnectionRequest::set_speechkitversion(const char* value) {
  set_has_speechkitversion();
  speechkitversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectionRequest.speechkitVersion)
}
void ConnectionRequest::set_speechkitversion(const char* value, size_t size) {
  set_has_speechkitversion();
  speechkitversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectionRequest.speechkitVersion)
}
::std::string* ConnectionRequest::mutable_speechkitversion() {
  set_has_speechkitversion();
  // @@protoc_insertion_point(field_mutable:ConnectionRequest.speechkitVersion)
  return speechkitversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectionRequest::release_speechkitversion() {
  // @@protoc_insertion_point(field_release:ConnectionRequest.speechkitVersion)
  clear_has_speechkitversion();
  return speechkitversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_allocated_speechkitversion(::std::string* speechkitversion) {
  if (speechkitversion != NULL) {
    set_has_speechkitversion();
  } else {
    clear_has_speechkitversion();
  }
  speechkitversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), speechkitversion);
  // @@protoc_insertion_point(field_set_allocated:ConnectionRequest.speechkitVersion)
}

// required string serviceName = 3;
bool ConnectionRequest::has_servicename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConnectionRequest::set_has_servicename() {
  _has_bits_[0] |= 0x00000004u;
}
void ConnectionRequest::clear_has_servicename() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConnectionRequest::clear_servicename() {
  servicename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_servicename();
}
const ::std::string& ConnectionRequest::servicename() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.serviceName)
  return servicename_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_servicename(const ::std::string& value) {
  set_has_servicename();
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectionRequest.serviceName)
}
void ConnectionRequest::set_servicename(const char* value) {
  set_has_servicename();
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectionRequest.serviceName)
}
void ConnectionRequest::set_servicename(const char* value, size_t size) {
  set_has_servicename();
  servicename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectionRequest.serviceName)
}
::std::string* ConnectionRequest::mutable_servicename() {
  set_has_servicename();
  // @@protoc_insertion_point(field_mutable:ConnectionRequest.serviceName)
  return servicename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectionRequest::release_servicename() {
  // @@protoc_insertion_point(field_release:ConnectionRequest.serviceName)
  clear_has_servicename();
  return servicename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_allocated_servicename(::std::string* servicename) {
  if (servicename != NULL) {
    set_has_servicename();
  } else {
    clear_has_servicename();
  }
  servicename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), servicename);
  // @@protoc_insertion_point(field_set_allocated:ConnectionRequest.serviceName)
}

// required string uuid = 4;
bool ConnectionRequest::has_uuid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConnectionRequest::set_has_uuid() {
  _has_bits_[0] |= 0x00000008u;
}
void ConnectionRequest::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConnectionRequest::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_uuid();
}
const ::std::string& ConnectionRequest::uuid() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.uuid)
  return uuid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_uuid(const ::std::string& value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectionRequest.uuid)
}
void ConnectionRequest::set_uuid(const char* value) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectionRequest.uuid)
}
void ConnectionRequest::set_uuid(const char* value, size_t size) {
  set_has_uuid();
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectionRequest.uuid)
}
::std::string* ConnectionRequest::mutable_uuid() {
  set_has_uuid();
  // @@protoc_insertion_point(field_mutable:ConnectionRequest.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectionRequest::release_uuid() {
  // @@protoc_insertion_point(field_release:ConnectionRequest.uuid)
  clear_has_uuid();
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    set_has_uuid();
  } else {
    clear_has_uuid();
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:ConnectionRequest.uuid)
}

// required string apiKey = 5;
bool ConnectionRequest::has_apikey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConnectionRequest::set_has_apikey() {
  _has_bits_[0] |= 0x00000010u;
}
void ConnectionRequest::clear_has_apikey() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConnectionRequest::clear_apikey() {
  apikey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_apikey();
}
const ::std::string& ConnectionRequest::apikey() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.apiKey)
  return apikey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_apikey(const ::std::string& value) {
  set_has_apikey();
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectionRequest.apiKey)
}
void ConnectionRequest::set_apikey(const char* value) {
  set_has_apikey();
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectionRequest.apiKey)
}
void ConnectionRequest::set_apikey(const char* value, size_t size) {
  set_has_apikey();
  apikey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectionRequest.apiKey)
}
::std::string* ConnectionRequest::mutable_apikey() {
  set_has_apikey();
  // @@protoc_insertion_point(field_mutable:ConnectionRequest.apiKey)
  return apikey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectionRequest::release_apikey() {
  // @@protoc_insertion_point(field_release:ConnectionRequest.apiKey)
  clear_has_apikey();
  return apikey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_allocated_apikey(::std::string* apikey) {
  if (apikey != NULL) {
    set_has_apikey();
  } else {
    clear_has_apikey();
  }
  apikey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), apikey);
  // @@protoc_insertion_point(field_set_allocated:ConnectionRequest.apiKey)
}

// required string applicationName = 6;
bool ConnectionRequest::has_applicationname() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConnectionRequest::set_has_applicationname() {
  _has_bits_[0] |= 0x00000020u;
}
void ConnectionRequest::clear_has_applicationname() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConnectionRequest::clear_applicationname() {
  applicationname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_applicationname();
}
const ::std::string& ConnectionRequest::applicationname() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.applicationName)
  return applicationname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_applicationname(const ::std::string& value) {
  set_has_applicationname();
  applicationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectionRequest.applicationName)
}
void ConnectionRequest::set_applicationname(const char* value) {
  set_has_applicationname();
  applicationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectionRequest.applicationName)
}
void ConnectionRequest::set_applicationname(const char* value, size_t size) {
  set_has_applicationname();
  applicationname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectionRequest.applicationName)
}
::std::string* ConnectionRequest::mutable_applicationname() {
  set_has_applicationname();
  // @@protoc_insertion_point(field_mutable:ConnectionRequest.applicationName)
  return applicationname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectionRequest::release_applicationname() {
  // @@protoc_insertion_point(field_release:ConnectionRequest.applicationName)
  clear_has_applicationname();
  return applicationname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_allocated_applicationname(::std::string* applicationname) {
  if (applicationname != NULL) {
    set_has_applicationname();
  } else {
    clear_has_applicationname();
  }
  applicationname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), applicationname);
  // @@protoc_insertion_point(field_set_allocated:ConnectionRequest.applicationName)
}

// required string device = 7;
bool ConnectionRequest::has_device() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConnectionRequest::set_has_device() {
  _has_bits_[0] |= 0x00000040u;
}
void ConnectionRequest::clear_has_device() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConnectionRequest::clear_device() {
  device_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_device();
}
const ::std::string& ConnectionRequest::device() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.device)
  return device_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_device(const ::std::string& value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectionRequest.device)
}
void ConnectionRequest::set_device(const char* value) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectionRequest.device)
}
void ConnectionRequest::set_device(const char* value, size_t size) {
  set_has_device();
  device_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectionRequest.device)
}
::std::string* ConnectionRequest::mutable_device() {
  set_has_device();
  // @@protoc_insertion_point(field_mutable:ConnectionRequest.device)
  return device_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectionRequest::release_device() {
  // @@protoc_insertion_point(field_release:ConnectionRequest.device)
  clear_has_device();
  return device_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_allocated_device(::std::string* device) {
  if (device != NULL) {
    set_has_device();
  } else {
    clear_has_device();
  }
  device_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), device);
  // @@protoc_insertion_point(field_set_allocated:ConnectionRequest.device)
}

// required string coords = 8;
bool ConnectionRequest::has_coords() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConnectionRequest::set_has_coords() {
  _has_bits_[0] |= 0x00000080u;
}
void ConnectionRequest::clear_has_coords() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConnectionRequest::clear_coords() {
  coords_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_coords();
}
const ::std::string& ConnectionRequest::coords() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.coords)
  return coords_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_coords(const ::std::string& value) {
  set_has_coords();
  coords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectionRequest.coords)
}
void ConnectionRequest::set_coords(const char* value) {
  set_has_coords();
  coords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectionRequest.coords)
}
void ConnectionRequest::set_coords(const char* value, size_t size) {
  set_has_coords();
  coords_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectionRequest.coords)
}
::std::string* ConnectionRequest::mutable_coords() {
  set_has_coords();
  // @@protoc_insertion_point(field_mutable:ConnectionRequest.coords)
  return coords_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectionRequest::release_coords() {
  // @@protoc_insertion_point(field_release:ConnectionRequest.coords)
  clear_has_coords();
  return coords_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_allocated_coords(::std::string* coords) {
  if (coords != NULL) {
    set_has_coords();
  } else {
    clear_has_coords();
  }
  coords_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), coords);
  // @@protoc_insertion_point(field_set_allocated:ConnectionRequest.coords)
}

// required string topic = 9;
bool ConnectionRequest::has_topic() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConnectionRequest::set_has_topic() {
  _has_bits_[0] |= 0x00000100u;
}
void ConnectionRequest::clear_has_topic() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConnectionRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
const ::std::string& ConnectionRequest::topic() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectionRequest.topic)
}
void ConnectionRequest::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectionRequest.topic)
}
void ConnectionRequest::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectionRequest.topic)
}
::std::string* ConnectionRequest::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:ConnectionRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectionRequest::release_topic() {
  // @@protoc_insertion_point(field_release:ConnectionRequest.topic)
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ConnectionRequest.topic)
}

// required string lang = 10;
bool ConnectionRequest::has_lang() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ConnectionRequest::set_has_lang() {
  _has_bits_[0] |= 0x00000200u;
}
void ConnectionRequest::clear_has_lang() {
  _has_bits_[0] &= ~0x00000200u;
}
void ConnectionRequest::clear_lang() {
  lang_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lang();
}
const ::std::string& ConnectionRequest::lang() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.lang)
  return lang_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_lang(const ::std::string& value) {
  set_has_lang();
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectionRequest.lang)
}
void ConnectionRequest::set_lang(const char* value) {
  set_has_lang();
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectionRequest.lang)
}
void ConnectionRequest::set_lang(const char* value, size_t size) {
  set_has_lang();
  lang_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectionRequest.lang)
}
::std::string* ConnectionRequest::mutable_lang() {
  set_has_lang();
  // @@protoc_insertion_point(field_mutable:ConnectionRequest.lang)
  return lang_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectionRequest::release_lang() {
  // @@protoc_insertion_point(field_release:ConnectionRequest.lang)
  clear_has_lang();
  return lang_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_allocated_lang(::std::string* lang) {
  if (lang != NULL) {
    set_has_lang();
  } else {
    clear_has_lang();
  }
  lang_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lang);
  // @@protoc_insertion_point(field_set_allocated:ConnectionRequest.lang)
}

// required string format = 11;
bool ConnectionRequest::has_format() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ConnectionRequest::set_has_format() {
  _has_bits_[0] |= 0x00000400u;
}
void ConnectionRequest::clear_has_format() {
  _has_bits_[0] &= ~0x00000400u;
}
void ConnectionRequest::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_format();
}
const ::std::string& ConnectionRequest::format() const {
  // @@protoc_insertion_point(field_get:ConnectionRequest.format)
  return format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_format(const ::std::string& value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnectionRequest.format)
}
void ConnectionRequest::set_format(const char* value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnectionRequest.format)
}
void ConnectionRequest::set_format(const char* value, size_t size) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnectionRequest.format)
}
::std::string* ConnectionRequest::mutable_format() {
  set_has_format();
  // @@protoc_insertion_point(field_mutable:ConnectionRequest.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ConnectionRequest::release_format() {
  // @@protoc_insertion_point(field_release:ConnectionRequest.format)
  clear_has_format();
  return format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ConnectionRequest::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    set_has_format();
  } else {
    clear_has_format();
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:ConnectionRequest.format)
}

inline const ConnectionRequest* ConnectionRequest::internal_default_instance() {
  return &ConnectionRequest_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
